{
    "navigate":{
      "name": "navigate",
      "action": [
        "(:action navigate",
        ":parameters (?veh - Vehicle ?start ?dst - Location)",
        ":precondition   (and (at ?veh ?start)(not (is-grasping ?veh)))",
        ":effect (and (not (at ?veh ?start))(at ?veh ?dst)(forall (?obj - Physobj)(when (and(located ?veh ?obj))(not (located ?veh ?obj))))))"
      ],
      "predicates": [
        "(at ?obj - Physobj ?loc - Location)",
        "(is-grasping ?veh - Vehicle)",
        "(located ?veh - Vehicle ?obj - Physobj)"
      ],
      "types":["Vehicle","Location"],
      "requirements":[":strips",":typing",":conditional-effects"]
    },
    "grasp-from-storage":{
      "name": "grasp-from-storage",
      "action": [
        "(:action grasp-from-storage",
        ":parameters(?veh - Vehicle ?store - Storage ?dock - Dockable ?loc - Location)",
        ":precondition(and(not (is-grasping ?veh))(in ?dock ?store)(at ?veh ?loc)(at ?store ?loc)(located ?veh ?store))",
        ":effect (and(not (in ?dock ?store))(not (is-full ?store))(is-grasping ?veh)(is-grasped ?dock ?veh)(not(contact-optimized ?dock))))"
      ],
      "predicates": [
        "(is-grasping ?veh - Vehicle)",
        "(in ?obj - Physobj ?store - Storage)",
        "(at ?obj - Physobj ?loc - Location)",
        "(located ?veh - Vehicle ?store - Storage)",
        "(is-full ?store - Storage)",
        "(is-grasped ?dock - Dockable ?veh - Vehicle)",
        "(contact-optimized ?dock - Dockable)"
      ],
      "types":["Vehicle","Location","Dockable","Storage"],
      "requirements":[":strips",":typing"]
    },
    "load-into":{
      "name": "load-into",
      "action": [
        "(:action load-into",
        ":parameters(?veh - Vehicle ?store - Storage ?dock - Dockable ?loc - Location)",
        ":precondition(and(not (is-full ?store))(is-grasping ?veh)(is-grasped ?dock ?veh)(at ?veh ?loc)(at ?store ?loc))",
        ":effect (and(not (is-grasping ?veh))(not (is-grasped ?dock ?veh))(in ?dock ?store)(is-full ?store)(not(contact-optimized ?dock))))"
      ],
      "predicates": [
        "(is-full ?store - Storage)",
        "(is-grasping ?veh - Vehicle)",
        "(is-grasped ?dock - Dockable ?veh - Vehicle)",
        "(at ?obj - Physobj ?loc - Location)",
        "(in ?obj - Physobj ?store - Storage)",
        "(is-full ?store - Storage)",
        "(contact-optimized ?dock - Dockable)"
      ],
      "types":["Vehicle","Location","Dockable","Storage"],
      "requirements":[":strips",":typing"]
    },
    "place-at":{
      "name": "place-at",
      "action": [
        "(:action place-at",
        ":parameters(?veh - Vehicle ?dock - Dockable ?loc - Location)",
        ":precondition(and(at ?veh ?loc)(is-grasping ?veh)(is-grasped ?dock ?veh))",
        ":effect (and(not (is-grasping ?veh))(not (is-grasped ?dock ?veh))(at ?dock ?loc)))"
      ],
      "predicates": [
        "(at ?obj - Physobj ?loc - Location)",
        "(is-grasping ?veh - Vehicle)",
        "(is-grasped ?dock - Dockable ?veh - Vehicle)"
      ],
      "types":["Vehicle","Location","Dockable"],
      "requirements":[":strips",":typing"]
    },
    "locate":{
      "name": "locate",
      "action": [
        "(:action locate",
        ":parameters(?veh - Vehicle ?obj - PhysObj ?loc - Location)",
        ":precondition (and(at ?veh ?loc)(at ?obj ?loc))",
        ":effect (and(located ?veh ?obj)))"
      ],
      "predicates": [
        "(at ?obj - Physobj ?loc - Location)",
        "(located ?veh - Vehicle ?obj - PhysObj)"
      ],
      "types":["Vehicle","Location","Storage"],
      "requirements":[":strips",":typing"]
    },
    "level":{
      "name": "level",
      "action": [
        "(:action level",
        ":parameters(?veh - Vehicle ?dock - Dockable ?loc - Location)",
        ":precondition(and(at ?veh ?loc)(is-grasping ?veh)(is-grasped ?dock ?veh))",
        ":effect(and(is-leveled ?loc)))"
      ],
      "predicates": [
        "(is-grasping ?veh - Vehicle)",
        "(is-grasped ?dock - Dockable ?veh - Vehicle)",
        "(at ?obj - Physobj ?loc - Location)",
        "(is-leveled ?loc)"
      ],
      "types":["Vehicle","Location","Dockable"],
      "requirements":[":typing"]
    },
    "optimize-contact":{
      "name": "optimize-contact",
      "action": [
        "(:action optimize-contact",
        ":parameters(?veh - Vehicle ?dock - Dockable ?loc - Location)",
        ":precondition(and(at ?veh ?loc)(is-grasping ?veh)(is-grasped ?dock ?veh)(is-leveled ?loc))",
        ":effect (and(contact-optimized ?dock)))"
      ],
      "predicates": [
        "(is-grasping ?veh - Vehicle)",
        "(is-grasped ?dock - Dockable ?veh - Vehicle)",
        "(at ?obj - Physobj ?loc - Location)",
        "(is-leveled ?loc)",
        "(contact-optimized ?dock - Dockable)"
      ],
      "types":["Vehicle","Location","Dockable"],
      "requirements":[":typing"]
    },
    "deploy":{
      "name": "deploy",
      "action": [
        "(:action deploy",
        ":parameters(?dock - Dockable ?loc - Location)",
        ":precondition(and(at ?dock ?loc)(is-leveled ?loc)(contact-optimized ?dock))",
        ":effect (and(deployed ?dock ?loc)))"
      ],
      "predicates": [
        "(at ?obj - Physobj ?loc - Location)",
        "(is-leveled ?loc)",
        "(contact-optimized ?dock - Dockable)",
        "(deployed ?dock ?loc)"
      ],
      "types":["Dockable","Location"],
      "requirements":[]
    },
    "move": {
      "name": "move",
      "action": [
        "(:action move",
        ":parameters (?dsk - Disk ?fromD ?toD - Object ?from ?to - Rod)",
        ":precondition (and(on ?dsk ?fromD)(top ?dsk ?from)(smaller ?dsk ?toD)(top ?toD ?to))",
        ":effect (and(not (on ?dsk ?fromD))(on ?dsk ?toD)(not (top ?dsk ?from))(top ?fromD ?from)(not (top ?toD ?to))(top ?dsk ?to)))"
      ],
      "predicates": [
        "(smaller ?fst ?snd - Object)",
        "(on ?dsk - Disk ?obj - Object)",
        "(top ?obj - Object ?rd - Rod)"
      ],
      "types":["Disk","Object","Rod"],
      "requirements":[":strips",":typing"]
    },
    "move_bus":{
      "name":"move_bus",
      "action":[
         "(:action move_bus",
         ":parameters (?from ?to - Location ?bu - Bus)",
         ":precondition (and(at ?from ?bu))",
         ":effect (and(not (at ?from ?bu))(at ?to ?bu)))"
      ],
      "predicates":["(at ?loc - Location ?obj - Physobj)"],
      "types":["Bus","Location"],
      "requirements":[]
    },
    "put-in":{
      "name":"put-in",
      "action":[
        "(:action put-in",
        ":parameters (?loc - Location ?pack - Package ?bu - Bus)",
        ":precondition (and(at ?loc ?pack)(at ?loc ?bu))",
        ":effect (and (not (at ?loc ?pack))(in ?pack ?bu)))"
      ],
      "predicates":["(at ?loc - Location ?obj - Physobj)",
                    "(in ?pack - Package ?bu - Bus)"],
      "types":["Location","Package","Bus"],
      "requirements":[]
    },
    "put-out":{
      "name":"put-out",
      "action":[
        "(:action put-out",
        ":parameters (?loc - Location ?pack - Package ?bu - Bus)",
        ":precondition (and(in ?pack ?bu)(at ?loc ?bu))",
        ":effect (and(not (in ?pack ?bu))(at ?loc ?pack)))"
      ],
      "predicates":["(at ?loc - Location ?obj - Physobj)",
                    "(in ?pack - Package ?bu - Bus)"],
      "types":["Location","Package","Bus"],
      "requirements":[]
    },
    "industry_grasp-from-station":{
      "name":"industry_grasp-from-station",
      "action":[
        "(:action industry_grasp-from-station",
        ":parameters(?veh - Vehicle ?store - Stationary ?dock - Graspable ?loc - Location)",
        ":precondition   (and(not (is-grasping ?veh))(in ?dock ?store)(at ?veh ?loc)(at ?store ?loc)(located ?veh ?store))",
        ":effect (and(not (in ?dock ?store))(is-grasping ?veh)(is-grasped ?dock ?veh)))"
      ],
      "predicates":[
        "(is-grasping ?veh - Vehicle)",
        "(in ?obj - Physobj ?sto - Storage)",
        "(at ?obj - Physobj ?loc - Location)",
        "(located ?veh - Vehicle ?obj - Physobj)",
        "(is-grasped ?dock - Graspable ?veh - Vehicle)"
      ],
      "types":["Vehicle","Stationary","Graspable","Location"],
      "requirements":[":strips",":typing"]
    },
    "industry_grasp-from-trunk":{
      "name":"industry_grasp-from-trunk",
      "action":[
        "(:action industry_grasp-from-trunk",
        ":parameters(?veh - Vehicle ?stu - StorageUnit ?dock - Graspable)",
        ":precondition (and(not (is-grasping ?veh))(in ?dock ?stu)(belongs-to ?stu ?veh)(located ?veh ?veh))",
        ":effect (and(not (in ?dock ?stu))(is-grasping ?veh)(is-grasped ?dock ?veh)(not (is-full ?stu))))"
      ],
      "predicates":[
        "(is-grasping ?veh - Vehicle)",
        "(in ?obj - Physobj ?sto - Storage)",
        "(belongs-to ?stu - StorageUnit ?veh - Vehicle)",
        "(located ?veh - Vehicle ?obj - Physobj)",
        "(is-grasped ?dock - Graspable ?veh - Vehicle)",
        "(is-full ?stu - StorageUnit)"
      ],
      "types":[
        "Vehicle","StorageUnit","Graspable"],
      "requirements":[":strips",":typing"]
    },
    "industry_load-into-station":{
     "name":"industry_load-into-station",
     "action":[
      "(:action industry_load-into-station",
      ":parameters(?veh - Vehicle ?store - Stationary ?dock - Graspable ?loc - Location)",
      ":precondition   (and(is-grasping ?veh)(is-grasped ?dock ?veh)(at ?veh ?loc)(at ?store ?loc)(located ?veh ?store))",
      ":effect (and(not (is-grasping ?veh))(not (is-grasped ?dock ?veh))(in ?dock ?store)))"
     ],
     "predicates":[
      "(is-grasping ?veh - Vehicle)",
      "(in ?obj - Physobj ?sto - Storage)",
      "(at ?obj - Physobj ?loc - Location)",
      "(located ?veh - Vehicle ?obj - Physobj)",
      "(is-grasped ?dock - Graspable ?veh - Vehicle)"
     ],
     "types":["Vehicle","Stationary","Graspable","Location"],
     "requirements":[":strips",":typing"]
    },
    "industry_load-into-trunk":{
      "name":"industry_load-into-trunk",
      "action":[
        "(:action industry_load-into-trunk",
        ":parameters(?veh - Vehicle ?stu - StorageUnit ?dock - Graspable)",
        ":precondition(and(is-grasping ?veh)(is-grasped ?dock ?veh)(belongs-to ?stu ?veh)(not(is-full ?stu))(located ?veh ?veh))",
        ":effect (and(not (is-grasping ?veh))(not (is-grasped ?dock ?veh))(in ?dock ?stu)(is-full ?stu)))"
      ],
      "predicates":[
        "(is-grasping ?veh - Vehicle)",
        "(is-grasped ?dock - Graspable ?veh - Vehicle)",
        "(belongs-to ?stu - StorageUnit ?veh - Vehicle)",
        "(is-full ?stu - StorageUnit)",
        "(located ?veh - Vehicle ?obj - Physobj)",
        "(in ?obj - Physobj ?sto - Storage)"
      ],
      "types":["Vehicle","StorageUnit","Graspable"],
      "requirements":[":strips",":typing"]
    },
    "industry_locate":{
      "name":"industry_locate",
      "action":[
        "(:action industry_locate",
        ":parameters(?veh - Vehicle ?obj - Physobj ?loc - Location)",
        ":precondition(and(at ?veh ?loc)(at ?obj ?loc))",
        ":effect (and(located ?veh ?obj)))"
      ],
      "predicates":[
        "(located ?veh - Vehicle ?obj - PhysObj)",
        "(at ?obj - Physobj ?loc - Location)"
      ],
      "types":["Vehicle","PhysObj"],
      "requirements":[":strips",":typing"]
    },
    "argos_drive":{
      "name":"argos_drive",
      "action":[
        "(:action argos_drive",
        ":parameters (?ro - Robot ?start ?dst - Location)",
        ":precondition   (and(at ?ro ?start)(not(is-grasping ?ro))(or (connected ?start ?dst) (connected ?dst ?start)) )",
        ":effect (and (not (at ?ro ?start))(at ?ro ?dst)(forall (?obj - Physobj) (when (and(located ?ro ?obj))",
        "                    (and(not (located ?ro ?obj))(not(fine-located ?ro ?obj)) )))",
        "            (forall (?ga - Gauge)(when (and(is-orientated ?ro ?ga))(not (is-orientated ?ro ?ga))))))"

      ],
      "predicates":[
        "(at ?pys - PhysObj ?l - Location)",
        "(is-grasping ?ro - Robot)",
        "(connected ?l1 ?l2 - Location)",
        "(located ?ro - Robot ?pys - PhysObj)",
        "(fine-located ?ro - Robot ?pys - PhysObj)",
        "(is-orientated ?ro - Robot ?ga - Gauge)"
      ],
      "types":[
        "Robot","Location"],
      "requirements":[
        ":strips",":adl",":negative-preconditions",":conditional-effects"
      ]
    },
    "argos_grasp":{
      "name":"argos_grasp",
      "action":[
        "(:action argos_grasp",
        ":parameters (?ro - Robot ?le - Lever ?l - Location)",
        ":precondition(and(at ?ro ?l)(at ?le ?l)(located ?ro ?le)(not (is-grasping ?ro )))",
        ":effect (and(is-grasping ?ro)(grasped ?le)))"
      ],
      "predicates":[
        "(at ?pys - PhysObj ?l - Location)",
        "(located ?ro - Robot ?pys - PhysObj)",
        "(is-grasping ?ro - Robot)",
        "(grasped ?le - Lever)"
      ],
      "types":[
        "Robot","Location","Lever"
      ],
      "requirements":[
        ":strips",":negative-preconditions"
      ]
    },
    "argos_release-lever":{
      "name":"argos_release-lever",
      "action":[
        "(:action argos_release-lever",
        ":parameters (?ro - Robot ?le - Lever)",
        ":precondition   (and(is-grasping ?ro)(grasped ?le))",
        ":effect (and (not (is-grasping ?ro))(not (grasped ?le))))"
      ],
      "predicates":[
        "(is-grasping ?ro - Robot)",
        "(grasped ?le - Lever)"
      ],
      "types":[
        "Robot","Lever"
      ],
      "requirements":[]
    },
    "argos_switch-lever":{
      "name":"argos_switch-lever",
      "action":[
        "(:action argos_switch-lever",
        ":parameters (?ro - Robot ?le - Lever)",
        ":precondition   (and(is-grasping ?ro)(grasped ?le))",
        ":effect (and(when (and (not(switched-on ?le)))(switched-on ?le))",
        "(when (and (switched-on ?le))(not (switched-on ?le)))))"
      ],
      "predicates":[
        "(is-grasping ?ro - Robot)",
        "(grasped ?le - Lever)",
        "(switched-on ?le - Lever)"
      ],
      "types":["Robot","Lever"],
      "requirements":[":strips",":conditional-effects",":typing"]
    },
    "argos_read-from-gauge":{
      "name": "argos_read-from-gauge",
      "action":[
        "(:action argos_read-from-gauge",
        ":parameters (?ro - Robot ?ga - Gauge)",
        ":precondition   (and(is-orientated ?ro ?ga))",
        ":effect (and(read ?ga)))"
      ],
      "predicates":[
        "(is-orientated ?ro - Robot ?ga - Gauge)",
        "(read ?ga - Gauge)"

      ],
      "types":[
        "Robot","Gauge"
      ],
      "requirements":[]
    },
    "argos_orientate":{
      "name":"argos_orientate",
      "action":[
        "(:action argos_orientate",
        ":parameters (?ro - Robot ?ga - Gauge)",
        ":precondition   (and(fine-located ?ro ?ga))",
        ":effect (and (is-orientated ?ro ?ga)))"
      ],
      "predicates":[
        "(is-orientated ?ro - Robot ?ga - Gauge)",
        "(fine-located ?ro - Robot ?pys - PhysObj)"
      ],
      "types":[
        "Robot","Gauge","PhysObj"
      ],
      "requirements":[]
    },
    "argos_fine-locate":{
      "name":"argos_fine-locate",
      "action":[
        "(:action argos_fine-locate",
        ":parameters (?ro - Robot ?obj - PhysObj)",
        ":precondition   (and(located ?ro ?obj))",
        ":effect (and(fine-located ?ro ?obj)))"
      ],
      "predicates":[
        "(located ?ro - Robot ?pys - PhysObj)",
        "(fine-located ?ro - Robot ?pys - PhysObj)"
      ],
      "types":[
        "Robot","PhysObj"
      ],
      "requirements":[]
    }
    
    

}