#
#
# Contributors:
# Christoph Suerig <christoph.suerig@dlr.de>
# Version 12.11.2018
from rafcontpp.model.plan_step import PlanStep

class PlanningReport:
    """PlanningReport
    PlanningReport is a report, generated by the Planner Interface. It contains the information, if
    planning was successful, the found plan, and in case an Error Message, as well as a refernce to
    all files, which where generated by the planner or the planner Interface.

    """

    def __init__(self, planning_successful, plan, generated_files, error_message='No Error!'):
        if plan and len(plan) > 0 and (not isinstance(plan[0],PlanStep)):
            raise TypeError('Plan has to be a list of type PlanStep!')

        self.__planning_successful = planning_successful
        self.__plan = plan
        self.__generated_files = generated_files
        self.__error_message = error_message


    def planning_successful(self):
        """
        :return: True if planning was successful, false otherwhise
        """
        return self.__planning_successful

    def get_plan(self):
        """
        :return: the plan as list of PlanStep
        """
        return self.__plan

    def get_error_message(self):
        """

        :return: a String, contining the error Message
        """
        return self.__error_message

    def get_generated_files(self):
        """

        :return: a list, containing all paths to files, generated by the planner.
        """
        return self.__generated_files
